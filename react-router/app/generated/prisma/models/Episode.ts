
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Episode` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Episode
 * 
 */
export type EpisodeModel = runtime.Types.Result.DefaultSelection<Prisma.$EpisodePayload>

export type AggregateEpisode = {
  _count: EpisodeCountAggregateOutputType | null
  _avg: EpisodeAvgAggregateOutputType | null
  _sum: EpisodeSumAggregateOutputType | null
  _min: EpisodeMinAggregateOutputType | null
  _max: EpisodeMaxAggregateOutputType | null
}

export type EpisodeAvgAggregateOutputType = {
  episodeNumber: number | null
}

export type EpisodeSumAggregateOutputType = {
  episodeNumber: number | null
}

export type EpisodeMinAggregateOutputType = {
  id: string | null
  title: string | null
  episodeNumber: number | null
  releaseDate: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type EpisodeMaxAggregateOutputType = {
  id: string | null
  title: string | null
  episodeNumber: number | null
  releaseDate: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type EpisodeCountAggregateOutputType = {
  id: number
  title: number
  episodeNumber: number
  releaseDate: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type EpisodeAvgAggregateInputType = {
  episodeNumber?: true
}

export type EpisodeSumAggregateInputType = {
  episodeNumber?: true
}

export type EpisodeMinAggregateInputType = {
  id?: true
  title?: true
  episodeNumber?: true
  releaseDate?: true
  createdAt?: true
  updatedAt?: true
}

export type EpisodeMaxAggregateInputType = {
  id?: true
  title?: true
  episodeNumber?: true
  releaseDate?: true
  createdAt?: true
  updatedAt?: true
}

export type EpisodeCountAggregateInputType = {
  id?: true
  title?: true
  episodeNumber?: true
  releaseDate?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type EpisodeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Episode to aggregate.
   */
  where?: Prisma.EpisodeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Episodes to fetch.
   */
  orderBy?: Prisma.EpisodeOrderByWithRelationInput | Prisma.EpisodeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EpisodeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Episodes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Episodes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Episodes
  **/
  _count?: true | EpisodeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: EpisodeAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: EpisodeSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EpisodeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EpisodeMaxAggregateInputType
}

export type GetEpisodeAggregateType<T extends EpisodeAggregateArgs> = {
      [P in keyof T & keyof AggregateEpisode]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEpisode[P]>
    : Prisma.GetScalarType<T[P], AggregateEpisode[P]>
}




export type EpisodeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EpisodeWhereInput
  orderBy?: Prisma.EpisodeOrderByWithAggregationInput | Prisma.EpisodeOrderByWithAggregationInput[]
  by: Prisma.EpisodeScalarFieldEnum[] | Prisma.EpisodeScalarFieldEnum
  having?: Prisma.EpisodeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EpisodeCountAggregateInputType | true
  _avg?: EpisodeAvgAggregateInputType
  _sum?: EpisodeSumAggregateInputType
  _min?: EpisodeMinAggregateInputType
  _max?: EpisodeMaxAggregateInputType
}

export type EpisodeGroupByOutputType = {
  id: string
  title: string
  episodeNumber: number
  releaseDate: Date
  createdAt: Date
  updatedAt: Date
  _count: EpisodeCountAggregateOutputType | null
  _avg: EpisodeAvgAggregateOutputType | null
  _sum: EpisodeSumAggregateOutputType | null
  _min: EpisodeMinAggregateOutputType | null
  _max: EpisodeMaxAggregateOutputType | null
}

type GetEpisodeGroupByPayload<T extends EpisodeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EpisodeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EpisodeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EpisodeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EpisodeGroupByOutputType[P]>
      }
    >
  > 



export type EpisodeWhereInput = {
  AND?: Prisma.EpisodeWhereInput | Prisma.EpisodeWhereInput[]
  OR?: Prisma.EpisodeWhereInput[]
  NOT?: Prisma.EpisodeWhereInput | Prisma.EpisodeWhereInput[]
  id?: Prisma.StringFilter<"Episode"> | string
  title?: Prisma.StringFilter<"Episode"> | string
  episodeNumber?: Prisma.IntFilter<"Episode"> | number
  releaseDate?: Prisma.DateTimeFilter<"Episode"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"Episode"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Episode"> | Date | string
  sets?: Prisma.DJSetListRelationFilter
}

export type EpisodeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  episodeNumber?: Prisma.SortOrder
  releaseDate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  sets?: Prisma.DJSetOrderByRelationAggregateInput
}

export type EpisodeWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  episodeNumber?: number
  AND?: Prisma.EpisodeWhereInput | Prisma.EpisodeWhereInput[]
  OR?: Prisma.EpisodeWhereInput[]
  NOT?: Prisma.EpisodeWhereInput | Prisma.EpisodeWhereInput[]
  title?: Prisma.StringFilter<"Episode"> | string
  releaseDate?: Prisma.DateTimeFilter<"Episode"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"Episode"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Episode"> | Date | string
  sets?: Prisma.DJSetListRelationFilter
}, "id" | "episodeNumber">

export type EpisodeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  episodeNumber?: Prisma.SortOrder
  releaseDate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.EpisodeCountOrderByAggregateInput
  _avg?: Prisma.EpisodeAvgOrderByAggregateInput
  _max?: Prisma.EpisodeMaxOrderByAggregateInput
  _min?: Prisma.EpisodeMinOrderByAggregateInput
  _sum?: Prisma.EpisodeSumOrderByAggregateInput
}

export type EpisodeScalarWhereWithAggregatesInput = {
  AND?: Prisma.EpisodeScalarWhereWithAggregatesInput | Prisma.EpisodeScalarWhereWithAggregatesInput[]
  OR?: Prisma.EpisodeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EpisodeScalarWhereWithAggregatesInput | Prisma.EpisodeScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Episode"> | string
  title?: Prisma.StringWithAggregatesFilter<"Episode"> | string
  episodeNumber?: Prisma.IntWithAggregatesFilter<"Episode"> | number
  releaseDate?: Prisma.DateTimeWithAggregatesFilter<"Episode"> | Date | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Episode"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Episode"> | Date | string
}

export type EpisodeCreateInput = {
  id?: string
  title: string
  episodeNumber: number
  releaseDate: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  sets?: Prisma.DJSetCreateNestedManyWithoutEpisodeInput
}

export type EpisodeUncheckedCreateInput = {
  id?: string
  title: string
  episodeNumber: number
  releaseDate: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  sets?: Prisma.DJSetUncheckedCreateNestedManyWithoutEpisodeInput
}

export type EpisodeUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  episodeNumber?: Prisma.IntFieldUpdateOperationsInput | number
  releaseDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sets?: Prisma.DJSetUpdateManyWithoutEpisodeNestedInput
}

export type EpisodeUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  episodeNumber?: Prisma.IntFieldUpdateOperationsInput | number
  releaseDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sets?: Prisma.DJSetUncheckedUpdateManyWithoutEpisodeNestedInput
}

export type EpisodeCreateManyInput = {
  id?: string
  title: string
  episodeNumber: number
  releaseDate: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EpisodeUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  episodeNumber?: Prisma.IntFieldUpdateOperationsInput | number
  releaseDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EpisodeUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  episodeNumber?: Prisma.IntFieldUpdateOperationsInput | number
  releaseDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EpisodeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  episodeNumber?: Prisma.SortOrder
  releaseDate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EpisodeAvgOrderByAggregateInput = {
  episodeNumber?: Prisma.SortOrder
}

export type EpisodeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  episodeNumber?: Prisma.SortOrder
  releaseDate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EpisodeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  episodeNumber?: Prisma.SortOrder
  releaseDate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EpisodeSumOrderByAggregateInput = {
  episodeNumber?: Prisma.SortOrder
}

export type EpisodeScalarRelationFilter = {
  is?: Prisma.EpisodeWhereInput
  isNot?: Prisma.EpisodeWhereInput
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type EpisodeCreateNestedOneWithoutSetsInput = {
  create?: Prisma.XOR<Prisma.EpisodeCreateWithoutSetsInput, Prisma.EpisodeUncheckedCreateWithoutSetsInput>
  connectOrCreate?: Prisma.EpisodeCreateOrConnectWithoutSetsInput
  connect?: Prisma.EpisodeWhereUniqueInput
}

export type EpisodeUpdateOneRequiredWithoutSetsNestedInput = {
  create?: Prisma.XOR<Prisma.EpisodeCreateWithoutSetsInput, Prisma.EpisodeUncheckedCreateWithoutSetsInput>
  connectOrCreate?: Prisma.EpisodeCreateOrConnectWithoutSetsInput
  upsert?: Prisma.EpisodeUpsertWithoutSetsInput
  connect?: Prisma.EpisodeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.EpisodeUpdateToOneWithWhereWithoutSetsInput, Prisma.EpisodeUpdateWithoutSetsInput>, Prisma.EpisodeUncheckedUpdateWithoutSetsInput>
}

export type EpisodeCreateWithoutSetsInput = {
  id?: string
  title: string
  episodeNumber: number
  releaseDate: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EpisodeUncheckedCreateWithoutSetsInput = {
  id?: string
  title: string
  episodeNumber: number
  releaseDate: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EpisodeCreateOrConnectWithoutSetsInput = {
  where: Prisma.EpisodeWhereUniqueInput
  create: Prisma.XOR<Prisma.EpisodeCreateWithoutSetsInput, Prisma.EpisodeUncheckedCreateWithoutSetsInput>
}

export type EpisodeUpsertWithoutSetsInput = {
  update: Prisma.XOR<Prisma.EpisodeUpdateWithoutSetsInput, Prisma.EpisodeUncheckedUpdateWithoutSetsInput>
  create: Prisma.XOR<Prisma.EpisodeCreateWithoutSetsInput, Prisma.EpisodeUncheckedCreateWithoutSetsInput>
  where?: Prisma.EpisodeWhereInput
}

export type EpisodeUpdateToOneWithWhereWithoutSetsInput = {
  where?: Prisma.EpisodeWhereInput
  data: Prisma.XOR<Prisma.EpisodeUpdateWithoutSetsInput, Prisma.EpisodeUncheckedUpdateWithoutSetsInput>
}

export type EpisodeUpdateWithoutSetsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  episodeNumber?: Prisma.IntFieldUpdateOperationsInput | number
  releaseDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EpisodeUncheckedUpdateWithoutSetsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  episodeNumber?: Prisma.IntFieldUpdateOperationsInput | number
  releaseDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type EpisodeCountOutputType
 */

export type EpisodeCountOutputType = {
  sets: number
}

export type EpisodeCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  sets?: boolean | EpisodeCountOutputTypeCountSetsArgs
}

/**
 * EpisodeCountOutputType without action
 */
export type EpisodeCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EpisodeCountOutputType
   */
  select?: Prisma.EpisodeCountOutputTypeSelect<ExtArgs> | null
}

/**
 * EpisodeCountOutputType without action
 */
export type EpisodeCountOutputTypeCountSetsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DJSetWhereInput
}


export type EpisodeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  episodeNumber?: boolean
  releaseDate?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  sets?: boolean | Prisma.Episode$setsArgs<ExtArgs>
  _count?: boolean | Prisma.EpisodeCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["episode"]>

export type EpisodeSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  episodeNumber?: boolean
  releaseDate?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["episode"]>

export type EpisodeSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  episodeNumber?: boolean
  releaseDate?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["episode"]>

export type EpisodeSelectScalar = {
  id?: boolean
  title?: boolean
  episodeNumber?: boolean
  releaseDate?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type EpisodeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "episodeNumber" | "releaseDate" | "createdAt" | "updatedAt", ExtArgs["result"]["episode"]>
export type EpisodeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  sets?: boolean | Prisma.Episode$setsArgs<ExtArgs>
  _count?: boolean | Prisma.EpisodeCountOutputTypeDefaultArgs<ExtArgs>
}
export type EpisodeIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type EpisodeIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $EpisodePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Episode"
  objects: {
    sets: Prisma.$DJSetPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    title: string
    episodeNumber: number
    releaseDate: Date
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["episode"]>
  composites: {}
}

export type EpisodeGetPayload<S extends boolean | null | undefined | EpisodeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EpisodePayload, S>

export type EpisodeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EpisodeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EpisodeCountAggregateInputType | true
  }

export interface EpisodeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Episode'], meta: { name: 'Episode' } }
  /**
   * Find zero or one Episode that matches the filter.
   * @param {EpisodeFindUniqueArgs} args - Arguments to find a Episode
   * @example
   * // Get one Episode
   * const episode = await prisma.episode.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EpisodeFindUniqueArgs>(args: Prisma.SelectSubset<T, EpisodeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EpisodeClient<runtime.Types.Result.GetResult<Prisma.$EpisodePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Episode that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EpisodeFindUniqueOrThrowArgs} args - Arguments to find a Episode
   * @example
   * // Get one Episode
   * const episode = await prisma.episode.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EpisodeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EpisodeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EpisodeClient<runtime.Types.Result.GetResult<Prisma.$EpisodePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Episode that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EpisodeFindFirstArgs} args - Arguments to find a Episode
   * @example
   * // Get one Episode
   * const episode = await prisma.episode.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EpisodeFindFirstArgs>(args?: Prisma.SelectSubset<T, EpisodeFindFirstArgs<ExtArgs>>): Prisma.Prisma__EpisodeClient<runtime.Types.Result.GetResult<Prisma.$EpisodePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Episode that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EpisodeFindFirstOrThrowArgs} args - Arguments to find a Episode
   * @example
   * // Get one Episode
   * const episode = await prisma.episode.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EpisodeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EpisodeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EpisodeClient<runtime.Types.Result.GetResult<Prisma.$EpisodePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Episodes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EpisodeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Episodes
   * const episodes = await prisma.episode.findMany()
   * 
   * // Get first 10 Episodes
   * const episodes = await prisma.episode.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const episodeWithIdOnly = await prisma.episode.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends EpisodeFindManyArgs>(args?: Prisma.SelectSubset<T, EpisodeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EpisodePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Episode.
   * @param {EpisodeCreateArgs} args - Arguments to create a Episode.
   * @example
   * // Create one Episode
   * const Episode = await prisma.episode.create({
   *   data: {
   *     // ... data to create a Episode
   *   }
   * })
   * 
   */
  create<T extends EpisodeCreateArgs>(args: Prisma.SelectSubset<T, EpisodeCreateArgs<ExtArgs>>): Prisma.Prisma__EpisodeClient<runtime.Types.Result.GetResult<Prisma.$EpisodePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Episodes.
   * @param {EpisodeCreateManyArgs} args - Arguments to create many Episodes.
   * @example
   * // Create many Episodes
   * const episode = await prisma.episode.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EpisodeCreateManyArgs>(args?: Prisma.SelectSubset<T, EpisodeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Episodes and returns the data saved in the database.
   * @param {EpisodeCreateManyAndReturnArgs} args - Arguments to create many Episodes.
   * @example
   * // Create many Episodes
   * const episode = await prisma.episode.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Episodes and only return the `id`
   * const episodeWithIdOnly = await prisma.episode.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends EpisodeCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, EpisodeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EpisodePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Episode.
   * @param {EpisodeDeleteArgs} args - Arguments to delete one Episode.
   * @example
   * // Delete one Episode
   * const Episode = await prisma.episode.delete({
   *   where: {
   *     // ... filter to delete one Episode
   *   }
   * })
   * 
   */
  delete<T extends EpisodeDeleteArgs>(args: Prisma.SelectSubset<T, EpisodeDeleteArgs<ExtArgs>>): Prisma.Prisma__EpisodeClient<runtime.Types.Result.GetResult<Prisma.$EpisodePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Episode.
   * @param {EpisodeUpdateArgs} args - Arguments to update one Episode.
   * @example
   * // Update one Episode
   * const episode = await prisma.episode.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EpisodeUpdateArgs>(args: Prisma.SelectSubset<T, EpisodeUpdateArgs<ExtArgs>>): Prisma.Prisma__EpisodeClient<runtime.Types.Result.GetResult<Prisma.$EpisodePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Episodes.
   * @param {EpisodeDeleteManyArgs} args - Arguments to filter Episodes to delete.
   * @example
   * // Delete a few Episodes
   * const { count } = await prisma.episode.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EpisodeDeleteManyArgs>(args?: Prisma.SelectSubset<T, EpisodeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Episodes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EpisodeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Episodes
   * const episode = await prisma.episode.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EpisodeUpdateManyArgs>(args: Prisma.SelectSubset<T, EpisodeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Episodes and returns the data updated in the database.
   * @param {EpisodeUpdateManyAndReturnArgs} args - Arguments to update many Episodes.
   * @example
   * // Update many Episodes
   * const episode = await prisma.episode.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Episodes and only return the `id`
   * const episodeWithIdOnly = await prisma.episode.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends EpisodeUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, EpisodeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EpisodePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Episode.
   * @param {EpisodeUpsertArgs} args - Arguments to update or create a Episode.
   * @example
   * // Update or create a Episode
   * const episode = await prisma.episode.upsert({
   *   create: {
   *     // ... data to create a Episode
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Episode we want to update
   *   }
   * })
   */
  upsert<T extends EpisodeUpsertArgs>(args: Prisma.SelectSubset<T, EpisodeUpsertArgs<ExtArgs>>): Prisma.Prisma__EpisodeClient<runtime.Types.Result.GetResult<Prisma.$EpisodePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Episodes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EpisodeCountArgs} args - Arguments to filter Episodes to count.
   * @example
   * // Count the number of Episodes
   * const count = await prisma.episode.count({
   *   where: {
   *     // ... the filter for the Episodes we want to count
   *   }
   * })
  **/
  count<T extends EpisodeCountArgs>(
    args?: Prisma.Subset<T, EpisodeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EpisodeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Episode.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EpisodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EpisodeAggregateArgs>(args: Prisma.Subset<T, EpisodeAggregateArgs>): Prisma.PrismaPromise<GetEpisodeAggregateType<T>>

  /**
   * Group by Episode.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EpisodeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EpisodeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EpisodeGroupByArgs['orderBy'] }
      : { orderBy?: EpisodeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EpisodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEpisodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Episode model
 */
readonly fields: EpisodeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Episode.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EpisodeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  sets<T extends Prisma.Episode$setsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Episode$setsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DJSetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Episode model
 */
export interface EpisodeFieldRefs {
  readonly id: Prisma.FieldRef<"Episode", 'String'>
  readonly title: Prisma.FieldRef<"Episode", 'String'>
  readonly episodeNumber: Prisma.FieldRef<"Episode", 'Int'>
  readonly releaseDate: Prisma.FieldRef<"Episode", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"Episode", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Episode", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Episode findUnique
 */
export type EpisodeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Episode
   */
  select?: Prisma.EpisodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Episode
   */
  omit?: Prisma.EpisodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EpisodeInclude<ExtArgs> | null
  /**
   * Filter, which Episode to fetch.
   */
  where: Prisma.EpisodeWhereUniqueInput
}

/**
 * Episode findUniqueOrThrow
 */
export type EpisodeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Episode
   */
  select?: Prisma.EpisodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Episode
   */
  omit?: Prisma.EpisodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EpisodeInclude<ExtArgs> | null
  /**
   * Filter, which Episode to fetch.
   */
  where: Prisma.EpisodeWhereUniqueInput
}

/**
 * Episode findFirst
 */
export type EpisodeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Episode
   */
  select?: Prisma.EpisodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Episode
   */
  omit?: Prisma.EpisodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EpisodeInclude<ExtArgs> | null
  /**
   * Filter, which Episode to fetch.
   */
  where?: Prisma.EpisodeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Episodes to fetch.
   */
  orderBy?: Prisma.EpisodeOrderByWithRelationInput | Prisma.EpisodeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Episodes.
   */
  cursor?: Prisma.EpisodeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Episodes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Episodes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Episodes.
   */
  distinct?: Prisma.EpisodeScalarFieldEnum | Prisma.EpisodeScalarFieldEnum[]
}

/**
 * Episode findFirstOrThrow
 */
export type EpisodeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Episode
   */
  select?: Prisma.EpisodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Episode
   */
  omit?: Prisma.EpisodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EpisodeInclude<ExtArgs> | null
  /**
   * Filter, which Episode to fetch.
   */
  where?: Prisma.EpisodeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Episodes to fetch.
   */
  orderBy?: Prisma.EpisodeOrderByWithRelationInput | Prisma.EpisodeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Episodes.
   */
  cursor?: Prisma.EpisodeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Episodes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Episodes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Episodes.
   */
  distinct?: Prisma.EpisodeScalarFieldEnum | Prisma.EpisodeScalarFieldEnum[]
}

/**
 * Episode findMany
 */
export type EpisodeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Episode
   */
  select?: Prisma.EpisodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Episode
   */
  omit?: Prisma.EpisodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EpisodeInclude<ExtArgs> | null
  /**
   * Filter, which Episodes to fetch.
   */
  where?: Prisma.EpisodeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Episodes to fetch.
   */
  orderBy?: Prisma.EpisodeOrderByWithRelationInput | Prisma.EpisodeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Episodes.
   */
  cursor?: Prisma.EpisodeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Episodes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Episodes.
   */
  skip?: number
  distinct?: Prisma.EpisodeScalarFieldEnum | Prisma.EpisodeScalarFieldEnum[]
}

/**
 * Episode create
 */
export type EpisodeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Episode
   */
  select?: Prisma.EpisodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Episode
   */
  omit?: Prisma.EpisodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EpisodeInclude<ExtArgs> | null
  /**
   * The data needed to create a Episode.
   */
  data: Prisma.XOR<Prisma.EpisodeCreateInput, Prisma.EpisodeUncheckedCreateInput>
}

/**
 * Episode createMany
 */
export type EpisodeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Episodes.
   */
  data: Prisma.EpisodeCreateManyInput | Prisma.EpisodeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Episode createManyAndReturn
 */
export type EpisodeCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Episode
   */
  select?: Prisma.EpisodeSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Episode
   */
  omit?: Prisma.EpisodeOmit<ExtArgs> | null
  /**
   * The data used to create many Episodes.
   */
  data: Prisma.EpisodeCreateManyInput | Prisma.EpisodeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Episode update
 */
export type EpisodeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Episode
   */
  select?: Prisma.EpisodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Episode
   */
  omit?: Prisma.EpisodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EpisodeInclude<ExtArgs> | null
  /**
   * The data needed to update a Episode.
   */
  data: Prisma.XOR<Prisma.EpisodeUpdateInput, Prisma.EpisodeUncheckedUpdateInput>
  /**
   * Choose, which Episode to update.
   */
  where: Prisma.EpisodeWhereUniqueInput
}

/**
 * Episode updateMany
 */
export type EpisodeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Episodes.
   */
  data: Prisma.XOR<Prisma.EpisodeUpdateManyMutationInput, Prisma.EpisodeUncheckedUpdateManyInput>
  /**
   * Filter which Episodes to update
   */
  where?: Prisma.EpisodeWhereInput
  /**
   * Limit how many Episodes to update.
   */
  limit?: number
}

/**
 * Episode updateManyAndReturn
 */
export type EpisodeUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Episode
   */
  select?: Prisma.EpisodeSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Episode
   */
  omit?: Prisma.EpisodeOmit<ExtArgs> | null
  /**
   * The data used to update Episodes.
   */
  data: Prisma.XOR<Prisma.EpisodeUpdateManyMutationInput, Prisma.EpisodeUncheckedUpdateManyInput>
  /**
   * Filter which Episodes to update
   */
  where?: Prisma.EpisodeWhereInput
  /**
   * Limit how many Episodes to update.
   */
  limit?: number
}

/**
 * Episode upsert
 */
export type EpisodeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Episode
   */
  select?: Prisma.EpisodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Episode
   */
  omit?: Prisma.EpisodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EpisodeInclude<ExtArgs> | null
  /**
   * The filter to search for the Episode to update in case it exists.
   */
  where: Prisma.EpisodeWhereUniqueInput
  /**
   * In case the Episode found by the `where` argument doesn't exist, create a new Episode with this data.
   */
  create: Prisma.XOR<Prisma.EpisodeCreateInput, Prisma.EpisodeUncheckedCreateInput>
  /**
   * In case the Episode was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EpisodeUpdateInput, Prisma.EpisodeUncheckedUpdateInput>
}

/**
 * Episode delete
 */
export type EpisodeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Episode
   */
  select?: Prisma.EpisodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Episode
   */
  omit?: Prisma.EpisodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EpisodeInclude<ExtArgs> | null
  /**
   * Filter which Episode to delete.
   */
  where: Prisma.EpisodeWhereUniqueInput
}

/**
 * Episode deleteMany
 */
export type EpisodeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Episodes to delete
   */
  where?: Prisma.EpisodeWhereInput
  /**
   * Limit how many Episodes to delete.
   */
  limit?: number
}

/**
 * Episode.sets
 */
export type Episode$setsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DJSet
   */
  select?: Prisma.DJSetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DJSet
   */
  omit?: Prisma.DJSetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DJSetInclude<ExtArgs> | null
  where?: Prisma.DJSetWhereInput
  orderBy?: Prisma.DJSetOrderByWithRelationInput | Prisma.DJSetOrderByWithRelationInput[]
  cursor?: Prisma.DJSetWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.DJSetScalarFieldEnum | Prisma.DJSetScalarFieldEnum[]
}

/**
 * Episode without action
 */
export type EpisodeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Episode
   */
  select?: Prisma.EpisodeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Episode
   */
  omit?: Prisma.EpisodeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EpisodeInclude<ExtArgs> | null
}
