
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Genre` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Genre
 * 
 */
export type GenreModel = runtime.Types.Result.DefaultSelection<Prisma.$GenrePayload>

export type AggregateGenre = {
  _count: GenreCountAggregateOutputType | null
  _min: GenreMinAggregateOutputType | null
  _max: GenreMaxAggregateOutputType | null
}

export type GenreMinAggregateOutputType = {
  id: string | null
  name: string | null
}

export type GenreMaxAggregateOutputType = {
  id: string | null
  name: string | null
}

export type GenreCountAggregateOutputType = {
  id: number
  name: number
  _all: number
}


export type GenreMinAggregateInputType = {
  id?: true
  name?: true
}

export type GenreMaxAggregateInputType = {
  id?: true
  name?: true
}

export type GenreCountAggregateInputType = {
  id?: true
  name?: true
  _all?: true
}

export type GenreAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Genre to aggregate.
   */
  where?: Prisma.GenreWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Genres to fetch.
   */
  orderBy?: Prisma.GenreOrderByWithRelationInput | Prisma.GenreOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.GenreWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Genres from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Genres.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Genres
  **/
  _count?: true | GenreCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: GenreMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: GenreMaxAggregateInputType
}

export type GetGenreAggregateType<T extends GenreAggregateArgs> = {
      [P in keyof T & keyof AggregateGenre]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateGenre[P]>
    : Prisma.GetScalarType<T[P], AggregateGenre[P]>
}




export type GenreGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GenreWhereInput
  orderBy?: Prisma.GenreOrderByWithAggregationInput | Prisma.GenreOrderByWithAggregationInput[]
  by: Prisma.GenreScalarFieldEnum[] | Prisma.GenreScalarFieldEnum
  having?: Prisma.GenreScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: GenreCountAggregateInputType | true
  _min?: GenreMinAggregateInputType
  _max?: GenreMaxAggregateInputType
}

export type GenreGroupByOutputType = {
  id: string
  name: string
  _count: GenreCountAggregateOutputType | null
  _min: GenreMinAggregateOutputType | null
  _max: GenreMaxAggregateOutputType | null
}

type GetGenreGroupByPayload<T extends GenreGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<GenreGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof GenreGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], GenreGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], GenreGroupByOutputType[P]>
      }
    >
  > 



export type GenreWhereInput = {
  AND?: Prisma.GenreWhereInput | Prisma.GenreWhereInput[]
  OR?: Prisma.GenreWhereInput[]
  NOT?: Prisma.GenreWhereInput | Prisma.GenreWhereInput[]
  id?: Prisma.StringFilter<"Genre"> | string
  name?: Prisma.StringFilter<"Genre"> | string
  sets?: Prisma.DJSetListRelationFilter
}

export type GenreOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  sets?: Prisma.DJSetOrderByRelationAggregateInput
}

export type GenreWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  name?: string
  AND?: Prisma.GenreWhereInput | Prisma.GenreWhereInput[]
  OR?: Prisma.GenreWhereInput[]
  NOT?: Prisma.GenreWhereInput | Prisma.GenreWhereInput[]
  sets?: Prisma.DJSetListRelationFilter
}, "id" | "name">

export type GenreOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  _count?: Prisma.GenreCountOrderByAggregateInput
  _max?: Prisma.GenreMaxOrderByAggregateInput
  _min?: Prisma.GenreMinOrderByAggregateInput
}

export type GenreScalarWhereWithAggregatesInput = {
  AND?: Prisma.GenreScalarWhereWithAggregatesInput | Prisma.GenreScalarWhereWithAggregatesInput[]
  OR?: Prisma.GenreScalarWhereWithAggregatesInput[]
  NOT?: Prisma.GenreScalarWhereWithAggregatesInput | Prisma.GenreScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Genre"> | string
  name?: Prisma.StringWithAggregatesFilter<"Genre"> | string
}

export type GenreCreateInput = {
  id?: string
  name: string
  sets?: Prisma.DJSetCreateNestedManyWithoutGenresInput
}

export type GenreUncheckedCreateInput = {
  id?: string
  name: string
  sets?: Prisma.DJSetUncheckedCreateNestedManyWithoutGenresInput
}

export type GenreUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  sets?: Prisma.DJSetUpdateManyWithoutGenresNestedInput
}

export type GenreUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  sets?: Prisma.DJSetUncheckedUpdateManyWithoutGenresNestedInput
}

export type GenreCreateManyInput = {
  id?: string
  name: string
}

export type GenreUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type GenreUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type GenreListRelationFilter = {
  every?: Prisma.GenreWhereInput
  some?: Prisma.GenreWhereInput
  none?: Prisma.GenreWhereInput
}

export type GenreOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type GenreCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type GenreMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type GenreMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type GenreCreateNestedManyWithoutSetsInput = {
  create?: Prisma.XOR<Prisma.GenreCreateWithoutSetsInput, Prisma.GenreUncheckedCreateWithoutSetsInput> | Prisma.GenreCreateWithoutSetsInput[] | Prisma.GenreUncheckedCreateWithoutSetsInput[]
  connectOrCreate?: Prisma.GenreCreateOrConnectWithoutSetsInput | Prisma.GenreCreateOrConnectWithoutSetsInput[]
  connect?: Prisma.GenreWhereUniqueInput | Prisma.GenreWhereUniqueInput[]
}

export type GenreUncheckedCreateNestedManyWithoutSetsInput = {
  create?: Prisma.XOR<Prisma.GenreCreateWithoutSetsInput, Prisma.GenreUncheckedCreateWithoutSetsInput> | Prisma.GenreCreateWithoutSetsInput[] | Prisma.GenreUncheckedCreateWithoutSetsInput[]
  connectOrCreate?: Prisma.GenreCreateOrConnectWithoutSetsInput | Prisma.GenreCreateOrConnectWithoutSetsInput[]
  connect?: Prisma.GenreWhereUniqueInput | Prisma.GenreWhereUniqueInput[]
}

export type GenreUpdateManyWithoutSetsNestedInput = {
  create?: Prisma.XOR<Prisma.GenreCreateWithoutSetsInput, Prisma.GenreUncheckedCreateWithoutSetsInput> | Prisma.GenreCreateWithoutSetsInput[] | Prisma.GenreUncheckedCreateWithoutSetsInput[]
  connectOrCreate?: Prisma.GenreCreateOrConnectWithoutSetsInput | Prisma.GenreCreateOrConnectWithoutSetsInput[]
  upsert?: Prisma.GenreUpsertWithWhereUniqueWithoutSetsInput | Prisma.GenreUpsertWithWhereUniqueWithoutSetsInput[]
  set?: Prisma.GenreWhereUniqueInput | Prisma.GenreWhereUniqueInput[]
  disconnect?: Prisma.GenreWhereUniqueInput | Prisma.GenreWhereUniqueInput[]
  delete?: Prisma.GenreWhereUniqueInput | Prisma.GenreWhereUniqueInput[]
  connect?: Prisma.GenreWhereUniqueInput | Prisma.GenreWhereUniqueInput[]
  update?: Prisma.GenreUpdateWithWhereUniqueWithoutSetsInput | Prisma.GenreUpdateWithWhereUniqueWithoutSetsInput[]
  updateMany?: Prisma.GenreUpdateManyWithWhereWithoutSetsInput | Prisma.GenreUpdateManyWithWhereWithoutSetsInput[]
  deleteMany?: Prisma.GenreScalarWhereInput | Prisma.GenreScalarWhereInput[]
}

export type GenreUncheckedUpdateManyWithoutSetsNestedInput = {
  create?: Prisma.XOR<Prisma.GenreCreateWithoutSetsInput, Prisma.GenreUncheckedCreateWithoutSetsInput> | Prisma.GenreCreateWithoutSetsInput[] | Prisma.GenreUncheckedCreateWithoutSetsInput[]
  connectOrCreate?: Prisma.GenreCreateOrConnectWithoutSetsInput | Prisma.GenreCreateOrConnectWithoutSetsInput[]
  upsert?: Prisma.GenreUpsertWithWhereUniqueWithoutSetsInput | Prisma.GenreUpsertWithWhereUniqueWithoutSetsInput[]
  set?: Prisma.GenreWhereUniqueInput | Prisma.GenreWhereUniqueInput[]
  disconnect?: Prisma.GenreWhereUniqueInput | Prisma.GenreWhereUniqueInput[]
  delete?: Prisma.GenreWhereUniqueInput | Prisma.GenreWhereUniqueInput[]
  connect?: Prisma.GenreWhereUniqueInput | Prisma.GenreWhereUniqueInput[]
  update?: Prisma.GenreUpdateWithWhereUniqueWithoutSetsInput | Prisma.GenreUpdateWithWhereUniqueWithoutSetsInput[]
  updateMany?: Prisma.GenreUpdateManyWithWhereWithoutSetsInput | Prisma.GenreUpdateManyWithWhereWithoutSetsInput[]
  deleteMany?: Prisma.GenreScalarWhereInput | Prisma.GenreScalarWhereInput[]
}

export type GenreCreateWithoutSetsInput = {
  id?: string
  name: string
}

export type GenreUncheckedCreateWithoutSetsInput = {
  id?: string
  name: string
}

export type GenreCreateOrConnectWithoutSetsInput = {
  where: Prisma.GenreWhereUniqueInput
  create: Prisma.XOR<Prisma.GenreCreateWithoutSetsInput, Prisma.GenreUncheckedCreateWithoutSetsInput>
}

export type GenreUpsertWithWhereUniqueWithoutSetsInput = {
  where: Prisma.GenreWhereUniqueInput
  update: Prisma.XOR<Prisma.GenreUpdateWithoutSetsInput, Prisma.GenreUncheckedUpdateWithoutSetsInput>
  create: Prisma.XOR<Prisma.GenreCreateWithoutSetsInput, Prisma.GenreUncheckedCreateWithoutSetsInput>
}

export type GenreUpdateWithWhereUniqueWithoutSetsInput = {
  where: Prisma.GenreWhereUniqueInput
  data: Prisma.XOR<Prisma.GenreUpdateWithoutSetsInput, Prisma.GenreUncheckedUpdateWithoutSetsInput>
}

export type GenreUpdateManyWithWhereWithoutSetsInput = {
  where: Prisma.GenreScalarWhereInput
  data: Prisma.XOR<Prisma.GenreUpdateManyMutationInput, Prisma.GenreUncheckedUpdateManyWithoutSetsInput>
}

export type GenreScalarWhereInput = {
  AND?: Prisma.GenreScalarWhereInput | Prisma.GenreScalarWhereInput[]
  OR?: Prisma.GenreScalarWhereInput[]
  NOT?: Prisma.GenreScalarWhereInput | Prisma.GenreScalarWhereInput[]
  id?: Prisma.StringFilter<"Genre"> | string
  name?: Prisma.StringFilter<"Genre"> | string
}

export type GenreUpdateWithoutSetsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type GenreUncheckedUpdateWithoutSetsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type GenreUncheckedUpdateManyWithoutSetsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type GenreCountOutputType
 */

export type GenreCountOutputType = {
  sets: number
}

export type GenreCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  sets?: boolean | GenreCountOutputTypeCountSetsArgs
}

/**
 * GenreCountOutputType without action
 */
export type GenreCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GenreCountOutputType
   */
  select?: Prisma.GenreCountOutputTypeSelect<ExtArgs> | null
}

/**
 * GenreCountOutputType without action
 */
export type GenreCountOutputTypeCountSetsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DJSetWhereInput
}


export type GenreSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  sets?: boolean | Prisma.Genre$setsArgs<ExtArgs>
  _count?: boolean | Prisma.GenreCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["genre"]>

export type GenreSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
}, ExtArgs["result"]["genre"]>

export type GenreSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
}, ExtArgs["result"]["genre"]>

export type GenreSelectScalar = {
  id?: boolean
  name?: boolean
}

export type GenreOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name", ExtArgs["result"]["genre"]>
export type GenreInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  sets?: boolean | Prisma.Genre$setsArgs<ExtArgs>
  _count?: boolean | Prisma.GenreCountOutputTypeDefaultArgs<ExtArgs>
}
export type GenreIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type GenreIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $GenrePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Genre"
  objects: {
    sets: Prisma.$DJSetPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
  }, ExtArgs["result"]["genre"]>
  composites: {}
}

export type GenreGetPayload<S extends boolean | null | undefined | GenreDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$GenrePayload, S>

export type GenreCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<GenreFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: GenreCountAggregateInputType | true
  }

export interface GenreDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Genre'], meta: { name: 'Genre' } }
  /**
   * Find zero or one Genre that matches the filter.
   * @param {GenreFindUniqueArgs} args - Arguments to find a Genre
   * @example
   * // Get one Genre
   * const genre = await prisma.genre.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends GenreFindUniqueArgs>(args: Prisma.SelectSubset<T, GenreFindUniqueArgs<ExtArgs>>): Prisma.Prisma__GenreClient<runtime.Types.Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Genre that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {GenreFindUniqueOrThrowArgs} args - Arguments to find a Genre
   * @example
   * // Get one Genre
   * const genre = await prisma.genre.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends GenreFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, GenreFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__GenreClient<runtime.Types.Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Genre that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GenreFindFirstArgs} args - Arguments to find a Genre
   * @example
   * // Get one Genre
   * const genre = await prisma.genre.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends GenreFindFirstArgs>(args?: Prisma.SelectSubset<T, GenreFindFirstArgs<ExtArgs>>): Prisma.Prisma__GenreClient<runtime.Types.Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Genre that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GenreFindFirstOrThrowArgs} args - Arguments to find a Genre
   * @example
   * // Get one Genre
   * const genre = await prisma.genre.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends GenreFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, GenreFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__GenreClient<runtime.Types.Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Genres that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GenreFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Genres
   * const genres = await prisma.genre.findMany()
   * 
   * // Get first 10 Genres
   * const genres = await prisma.genre.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const genreWithIdOnly = await prisma.genre.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends GenreFindManyArgs>(args?: Prisma.SelectSubset<T, GenreFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Genre.
   * @param {GenreCreateArgs} args - Arguments to create a Genre.
   * @example
   * // Create one Genre
   * const Genre = await prisma.genre.create({
   *   data: {
   *     // ... data to create a Genre
   *   }
   * })
   * 
   */
  create<T extends GenreCreateArgs>(args: Prisma.SelectSubset<T, GenreCreateArgs<ExtArgs>>): Prisma.Prisma__GenreClient<runtime.Types.Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Genres.
   * @param {GenreCreateManyArgs} args - Arguments to create many Genres.
   * @example
   * // Create many Genres
   * const genre = await prisma.genre.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends GenreCreateManyArgs>(args?: Prisma.SelectSubset<T, GenreCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Genres and returns the data saved in the database.
   * @param {GenreCreateManyAndReturnArgs} args - Arguments to create many Genres.
   * @example
   * // Create many Genres
   * const genre = await prisma.genre.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Genres and only return the `id`
   * const genreWithIdOnly = await prisma.genre.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends GenreCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, GenreCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Genre.
   * @param {GenreDeleteArgs} args - Arguments to delete one Genre.
   * @example
   * // Delete one Genre
   * const Genre = await prisma.genre.delete({
   *   where: {
   *     // ... filter to delete one Genre
   *   }
   * })
   * 
   */
  delete<T extends GenreDeleteArgs>(args: Prisma.SelectSubset<T, GenreDeleteArgs<ExtArgs>>): Prisma.Prisma__GenreClient<runtime.Types.Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Genre.
   * @param {GenreUpdateArgs} args - Arguments to update one Genre.
   * @example
   * // Update one Genre
   * const genre = await prisma.genre.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends GenreUpdateArgs>(args: Prisma.SelectSubset<T, GenreUpdateArgs<ExtArgs>>): Prisma.Prisma__GenreClient<runtime.Types.Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Genres.
   * @param {GenreDeleteManyArgs} args - Arguments to filter Genres to delete.
   * @example
   * // Delete a few Genres
   * const { count } = await prisma.genre.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends GenreDeleteManyArgs>(args?: Prisma.SelectSubset<T, GenreDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Genres.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GenreUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Genres
   * const genre = await prisma.genre.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends GenreUpdateManyArgs>(args: Prisma.SelectSubset<T, GenreUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Genres and returns the data updated in the database.
   * @param {GenreUpdateManyAndReturnArgs} args - Arguments to update many Genres.
   * @example
   * // Update many Genres
   * const genre = await prisma.genre.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Genres and only return the `id`
   * const genreWithIdOnly = await prisma.genre.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends GenreUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, GenreUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Genre.
   * @param {GenreUpsertArgs} args - Arguments to update or create a Genre.
   * @example
   * // Update or create a Genre
   * const genre = await prisma.genre.upsert({
   *   create: {
   *     // ... data to create a Genre
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Genre we want to update
   *   }
   * })
   */
  upsert<T extends GenreUpsertArgs>(args: Prisma.SelectSubset<T, GenreUpsertArgs<ExtArgs>>): Prisma.Prisma__GenreClient<runtime.Types.Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Genres.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GenreCountArgs} args - Arguments to filter Genres to count.
   * @example
   * // Count the number of Genres
   * const count = await prisma.genre.count({
   *   where: {
   *     // ... the filter for the Genres we want to count
   *   }
   * })
  **/
  count<T extends GenreCountArgs>(
    args?: Prisma.Subset<T, GenreCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], GenreCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Genre.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GenreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends GenreAggregateArgs>(args: Prisma.Subset<T, GenreAggregateArgs>): Prisma.PrismaPromise<GetGenreAggregateType<T>>

  /**
   * Group by Genre.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GenreGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends GenreGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: GenreGroupByArgs['orderBy'] }
      : { orderBy?: GenreGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, GenreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGenreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Genre model
 */
readonly fields: GenreFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Genre.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__GenreClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  sets<T extends Prisma.Genre$setsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Genre$setsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DJSetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Genre model
 */
export interface GenreFieldRefs {
  readonly id: Prisma.FieldRef<"Genre", 'String'>
  readonly name: Prisma.FieldRef<"Genre", 'String'>
}
    

// Custom InputTypes
/**
 * Genre findUnique
 */
export type GenreFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Genre
   */
  select?: Prisma.GenreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Genre
   */
  omit?: Prisma.GenreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GenreInclude<ExtArgs> | null
  /**
   * Filter, which Genre to fetch.
   */
  where: Prisma.GenreWhereUniqueInput
}

/**
 * Genre findUniqueOrThrow
 */
export type GenreFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Genre
   */
  select?: Prisma.GenreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Genre
   */
  omit?: Prisma.GenreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GenreInclude<ExtArgs> | null
  /**
   * Filter, which Genre to fetch.
   */
  where: Prisma.GenreWhereUniqueInput
}

/**
 * Genre findFirst
 */
export type GenreFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Genre
   */
  select?: Prisma.GenreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Genre
   */
  omit?: Prisma.GenreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GenreInclude<ExtArgs> | null
  /**
   * Filter, which Genre to fetch.
   */
  where?: Prisma.GenreWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Genres to fetch.
   */
  orderBy?: Prisma.GenreOrderByWithRelationInput | Prisma.GenreOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Genres.
   */
  cursor?: Prisma.GenreWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Genres from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Genres.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Genres.
   */
  distinct?: Prisma.GenreScalarFieldEnum | Prisma.GenreScalarFieldEnum[]
}

/**
 * Genre findFirstOrThrow
 */
export type GenreFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Genre
   */
  select?: Prisma.GenreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Genre
   */
  omit?: Prisma.GenreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GenreInclude<ExtArgs> | null
  /**
   * Filter, which Genre to fetch.
   */
  where?: Prisma.GenreWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Genres to fetch.
   */
  orderBy?: Prisma.GenreOrderByWithRelationInput | Prisma.GenreOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Genres.
   */
  cursor?: Prisma.GenreWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Genres from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Genres.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Genres.
   */
  distinct?: Prisma.GenreScalarFieldEnum | Prisma.GenreScalarFieldEnum[]
}

/**
 * Genre findMany
 */
export type GenreFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Genre
   */
  select?: Prisma.GenreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Genre
   */
  omit?: Prisma.GenreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GenreInclude<ExtArgs> | null
  /**
   * Filter, which Genres to fetch.
   */
  where?: Prisma.GenreWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Genres to fetch.
   */
  orderBy?: Prisma.GenreOrderByWithRelationInput | Prisma.GenreOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Genres.
   */
  cursor?: Prisma.GenreWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Genres from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Genres.
   */
  skip?: number
  distinct?: Prisma.GenreScalarFieldEnum | Prisma.GenreScalarFieldEnum[]
}

/**
 * Genre create
 */
export type GenreCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Genre
   */
  select?: Prisma.GenreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Genre
   */
  omit?: Prisma.GenreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GenreInclude<ExtArgs> | null
  /**
   * The data needed to create a Genre.
   */
  data: Prisma.XOR<Prisma.GenreCreateInput, Prisma.GenreUncheckedCreateInput>
}

/**
 * Genre createMany
 */
export type GenreCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Genres.
   */
  data: Prisma.GenreCreateManyInput | Prisma.GenreCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Genre createManyAndReturn
 */
export type GenreCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Genre
   */
  select?: Prisma.GenreSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Genre
   */
  omit?: Prisma.GenreOmit<ExtArgs> | null
  /**
   * The data used to create many Genres.
   */
  data: Prisma.GenreCreateManyInput | Prisma.GenreCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Genre update
 */
export type GenreUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Genre
   */
  select?: Prisma.GenreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Genre
   */
  omit?: Prisma.GenreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GenreInclude<ExtArgs> | null
  /**
   * The data needed to update a Genre.
   */
  data: Prisma.XOR<Prisma.GenreUpdateInput, Prisma.GenreUncheckedUpdateInput>
  /**
   * Choose, which Genre to update.
   */
  where: Prisma.GenreWhereUniqueInput
}

/**
 * Genre updateMany
 */
export type GenreUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Genres.
   */
  data: Prisma.XOR<Prisma.GenreUpdateManyMutationInput, Prisma.GenreUncheckedUpdateManyInput>
  /**
   * Filter which Genres to update
   */
  where?: Prisma.GenreWhereInput
  /**
   * Limit how many Genres to update.
   */
  limit?: number
}

/**
 * Genre updateManyAndReturn
 */
export type GenreUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Genre
   */
  select?: Prisma.GenreSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Genre
   */
  omit?: Prisma.GenreOmit<ExtArgs> | null
  /**
   * The data used to update Genres.
   */
  data: Prisma.XOR<Prisma.GenreUpdateManyMutationInput, Prisma.GenreUncheckedUpdateManyInput>
  /**
   * Filter which Genres to update
   */
  where?: Prisma.GenreWhereInput
  /**
   * Limit how many Genres to update.
   */
  limit?: number
}

/**
 * Genre upsert
 */
export type GenreUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Genre
   */
  select?: Prisma.GenreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Genre
   */
  omit?: Prisma.GenreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GenreInclude<ExtArgs> | null
  /**
   * The filter to search for the Genre to update in case it exists.
   */
  where: Prisma.GenreWhereUniqueInput
  /**
   * In case the Genre found by the `where` argument doesn't exist, create a new Genre with this data.
   */
  create: Prisma.XOR<Prisma.GenreCreateInput, Prisma.GenreUncheckedCreateInput>
  /**
   * In case the Genre was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.GenreUpdateInput, Prisma.GenreUncheckedUpdateInput>
}

/**
 * Genre delete
 */
export type GenreDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Genre
   */
  select?: Prisma.GenreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Genre
   */
  omit?: Prisma.GenreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GenreInclude<ExtArgs> | null
  /**
   * Filter which Genre to delete.
   */
  where: Prisma.GenreWhereUniqueInput
}

/**
 * Genre deleteMany
 */
export type GenreDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Genres to delete
   */
  where?: Prisma.GenreWhereInput
  /**
   * Limit how many Genres to delete.
   */
  limit?: number
}

/**
 * Genre.sets
 */
export type Genre$setsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DJSet
   */
  select?: Prisma.DJSetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DJSet
   */
  omit?: Prisma.DJSetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DJSetInclude<ExtArgs> | null
  where?: Prisma.DJSetWhereInput
  orderBy?: Prisma.DJSetOrderByWithRelationInput | Prisma.DJSetOrderByWithRelationInput[]
  cursor?: Prisma.DJSetWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.DJSetScalarFieldEnum | Prisma.DJSetScalarFieldEnum[]
}

/**
 * Genre without action
 */
export type GenreDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Genre
   */
  select?: Prisma.GenreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Genre
   */
  omit?: Prisma.GenreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GenreInclude<ExtArgs> | null
}
