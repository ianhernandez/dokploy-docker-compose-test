
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `DJ` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model DJ
 * 
 */
export type DJModel = runtime.Types.Result.DefaultSelection<Prisma.$DJPayload>

export type AggregateDJ = {
  _count: DJCountAggregateOutputType | null
  _min: DJMinAggregateOutputType | null
  _max: DJMaxAggregateOutputType | null
}

export type DJMinAggregateOutputType = {
  id: string | null
  name: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type DJMaxAggregateOutputType = {
  id: string | null
  name: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type DJCountAggregateOutputType = {
  id: number
  name: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type DJMinAggregateInputType = {
  id?: true
  name?: true
  createdAt?: true
  updatedAt?: true
}

export type DJMaxAggregateInputType = {
  id?: true
  name?: true
  createdAt?: true
  updatedAt?: true
}

export type DJCountAggregateInputType = {
  id?: true
  name?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type DJAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DJ to aggregate.
   */
  where?: Prisma.DJWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DJS to fetch.
   */
  orderBy?: Prisma.DJOrderByWithRelationInput | Prisma.DJOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DJWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DJS from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DJS.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned DJS
  **/
  _count?: true | DJCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DJMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DJMaxAggregateInputType
}

export type GetDJAggregateType<T extends DJAggregateArgs> = {
      [P in keyof T & keyof AggregateDJ]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDJ[P]>
    : Prisma.GetScalarType<T[P], AggregateDJ[P]>
}




export type DJGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DJWhereInput
  orderBy?: Prisma.DJOrderByWithAggregationInput | Prisma.DJOrderByWithAggregationInput[]
  by: Prisma.DJScalarFieldEnum[] | Prisma.DJScalarFieldEnum
  having?: Prisma.DJScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DJCountAggregateInputType | true
  _min?: DJMinAggregateInputType
  _max?: DJMaxAggregateInputType
}

export type DJGroupByOutputType = {
  id: string
  name: string
  createdAt: Date
  updatedAt: Date
  _count: DJCountAggregateOutputType | null
  _min: DJMinAggregateOutputType | null
  _max: DJMaxAggregateOutputType | null
}

type GetDJGroupByPayload<T extends DJGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DJGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DJGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DJGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DJGroupByOutputType[P]>
      }
    >
  > 



export type DJWhereInput = {
  AND?: Prisma.DJWhereInput | Prisma.DJWhereInput[]
  OR?: Prisma.DJWhereInput[]
  NOT?: Prisma.DJWhereInput | Prisma.DJWhereInput[]
  id?: Prisma.StringFilter<"DJ"> | string
  name?: Prisma.StringFilter<"DJ"> | string
  createdAt?: Prisma.DateTimeFilter<"DJ"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"DJ"> | Date | string
  sets?: Prisma.DJSetListRelationFilter
}

export type DJOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  sets?: Prisma.DJSetOrderByRelationAggregateInput
}

export type DJWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.DJWhereInput | Prisma.DJWhereInput[]
  OR?: Prisma.DJWhereInput[]
  NOT?: Prisma.DJWhereInput | Prisma.DJWhereInput[]
  name?: Prisma.StringFilter<"DJ"> | string
  createdAt?: Prisma.DateTimeFilter<"DJ"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"DJ"> | Date | string
  sets?: Prisma.DJSetListRelationFilter
}, "id">

export type DJOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.DJCountOrderByAggregateInput
  _max?: Prisma.DJMaxOrderByAggregateInput
  _min?: Prisma.DJMinOrderByAggregateInput
}

export type DJScalarWhereWithAggregatesInput = {
  AND?: Prisma.DJScalarWhereWithAggregatesInput | Prisma.DJScalarWhereWithAggregatesInput[]
  OR?: Prisma.DJScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DJScalarWhereWithAggregatesInput | Prisma.DJScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"DJ"> | string
  name?: Prisma.StringWithAggregatesFilter<"DJ"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"DJ"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"DJ"> | Date | string
}

export type DJCreateInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  sets?: Prisma.DJSetCreateNestedManyWithoutDjInput
}

export type DJUncheckedCreateInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  sets?: Prisma.DJSetUncheckedCreateNestedManyWithoutDjInput
}

export type DJUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sets?: Prisma.DJSetUpdateManyWithoutDjNestedInput
}

export type DJUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sets?: Prisma.DJSetUncheckedUpdateManyWithoutDjNestedInput
}

export type DJCreateManyInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DJUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DJUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DJCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DJMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DJMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DJScalarRelationFilter = {
  is?: Prisma.DJWhereInput
  isNot?: Prisma.DJWhereInput
}

export type DJCreateNestedOneWithoutSetsInput = {
  create?: Prisma.XOR<Prisma.DJCreateWithoutSetsInput, Prisma.DJUncheckedCreateWithoutSetsInput>
  connectOrCreate?: Prisma.DJCreateOrConnectWithoutSetsInput
  connect?: Prisma.DJWhereUniqueInput
}

export type DJUpdateOneRequiredWithoutSetsNestedInput = {
  create?: Prisma.XOR<Prisma.DJCreateWithoutSetsInput, Prisma.DJUncheckedCreateWithoutSetsInput>
  connectOrCreate?: Prisma.DJCreateOrConnectWithoutSetsInput
  upsert?: Prisma.DJUpsertWithoutSetsInput
  connect?: Prisma.DJWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DJUpdateToOneWithWhereWithoutSetsInput, Prisma.DJUpdateWithoutSetsInput>, Prisma.DJUncheckedUpdateWithoutSetsInput>
}

export type DJCreateWithoutSetsInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DJUncheckedCreateWithoutSetsInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DJCreateOrConnectWithoutSetsInput = {
  where: Prisma.DJWhereUniqueInput
  create: Prisma.XOR<Prisma.DJCreateWithoutSetsInput, Prisma.DJUncheckedCreateWithoutSetsInput>
}

export type DJUpsertWithoutSetsInput = {
  update: Prisma.XOR<Prisma.DJUpdateWithoutSetsInput, Prisma.DJUncheckedUpdateWithoutSetsInput>
  create: Prisma.XOR<Prisma.DJCreateWithoutSetsInput, Prisma.DJUncheckedCreateWithoutSetsInput>
  where?: Prisma.DJWhereInput
}

export type DJUpdateToOneWithWhereWithoutSetsInput = {
  where?: Prisma.DJWhereInput
  data: Prisma.XOR<Prisma.DJUpdateWithoutSetsInput, Prisma.DJUncheckedUpdateWithoutSetsInput>
}

export type DJUpdateWithoutSetsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DJUncheckedUpdateWithoutSetsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type DJCountOutputType
 */

export type DJCountOutputType = {
  sets: number
}

export type DJCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  sets?: boolean | DJCountOutputTypeCountSetsArgs
}

/**
 * DJCountOutputType without action
 */
export type DJCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DJCountOutputType
   */
  select?: Prisma.DJCountOutputTypeSelect<ExtArgs> | null
}

/**
 * DJCountOutputType without action
 */
export type DJCountOutputTypeCountSetsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DJSetWhereInput
}


export type DJSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  sets?: boolean | Prisma.DJ$setsArgs<ExtArgs>
  _count?: boolean | Prisma.DJCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dJ"]>

export type DJSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["dJ"]>

export type DJSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["dJ"]>

export type DJSelectScalar = {
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type DJOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["dJ"]>
export type DJInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  sets?: boolean | Prisma.DJ$setsArgs<ExtArgs>
  _count?: boolean | Prisma.DJCountOutputTypeDefaultArgs<ExtArgs>
}
export type DJIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type DJIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $DJPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "DJ"
  objects: {
    sets: Prisma.$DJSetPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["dJ"]>
  composites: {}
}

export type DJGetPayload<S extends boolean | null | undefined | DJDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DJPayload, S>

export type DJCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DJFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DJCountAggregateInputType | true
  }

export interface DJDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DJ'], meta: { name: 'DJ' } }
  /**
   * Find zero or one DJ that matches the filter.
   * @param {DJFindUniqueArgs} args - Arguments to find a DJ
   * @example
   * // Get one DJ
   * const dJ = await prisma.dJ.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DJFindUniqueArgs>(args: Prisma.SelectSubset<T, DJFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DJClient<runtime.Types.Result.GetResult<Prisma.$DJPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one DJ that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DJFindUniqueOrThrowArgs} args - Arguments to find a DJ
   * @example
   * // Get one DJ
   * const dJ = await prisma.dJ.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DJFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DJFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DJClient<runtime.Types.Result.GetResult<Prisma.$DJPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DJ that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DJFindFirstArgs} args - Arguments to find a DJ
   * @example
   * // Get one DJ
   * const dJ = await prisma.dJ.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DJFindFirstArgs>(args?: Prisma.SelectSubset<T, DJFindFirstArgs<ExtArgs>>): Prisma.Prisma__DJClient<runtime.Types.Result.GetResult<Prisma.$DJPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DJ that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DJFindFirstOrThrowArgs} args - Arguments to find a DJ
   * @example
   * // Get one DJ
   * const dJ = await prisma.dJ.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DJFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DJFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DJClient<runtime.Types.Result.GetResult<Prisma.$DJPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more DJS that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DJFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all DJS
   * const dJS = await prisma.dJ.findMany()
   * 
   * // Get first 10 DJS
   * const dJS = await prisma.dJ.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const dJWithIdOnly = await prisma.dJ.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DJFindManyArgs>(args?: Prisma.SelectSubset<T, DJFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DJPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a DJ.
   * @param {DJCreateArgs} args - Arguments to create a DJ.
   * @example
   * // Create one DJ
   * const DJ = await prisma.dJ.create({
   *   data: {
   *     // ... data to create a DJ
   *   }
   * })
   * 
   */
  create<T extends DJCreateArgs>(args: Prisma.SelectSubset<T, DJCreateArgs<ExtArgs>>): Prisma.Prisma__DJClient<runtime.Types.Result.GetResult<Prisma.$DJPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many DJS.
   * @param {DJCreateManyArgs} args - Arguments to create many DJS.
   * @example
   * // Create many DJS
   * const dJ = await prisma.dJ.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DJCreateManyArgs>(args?: Prisma.SelectSubset<T, DJCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many DJS and returns the data saved in the database.
   * @param {DJCreateManyAndReturnArgs} args - Arguments to create many DJS.
   * @example
   * // Create many DJS
   * const dJ = await prisma.dJ.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many DJS and only return the `id`
   * const dJWithIdOnly = await prisma.dJ.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DJCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DJCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DJPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a DJ.
   * @param {DJDeleteArgs} args - Arguments to delete one DJ.
   * @example
   * // Delete one DJ
   * const DJ = await prisma.dJ.delete({
   *   where: {
   *     // ... filter to delete one DJ
   *   }
   * })
   * 
   */
  delete<T extends DJDeleteArgs>(args: Prisma.SelectSubset<T, DJDeleteArgs<ExtArgs>>): Prisma.Prisma__DJClient<runtime.Types.Result.GetResult<Prisma.$DJPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one DJ.
   * @param {DJUpdateArgs} args - Arguments to update one DJ.
   * @example
   * // Update one DJ
   * const dJ = await prisma.dJ.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DJUpdateArgs>(args: Prisma.SelectSubset<T, DJUpdateArgs<ExtArgs>>): Prisma.Prisma__DJClient<runtime.Types.Result.GetResult<Prisma.$DJPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more DJS.
   * @param {DJDeleteManyArgs} args - Arguments to filter DJS to delete.
   * @example
   * // Delete a few DJS
   * const { count } = await prisma.dJ.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DJDeleteManyArgs>(args?: Prisma.SelectSubset<T, DJDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DJS.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DJUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many DJS
   * const dJ = await prisma.dJ.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DJUpdateManyArgs>(args: Prisma.SelectSubset<T, DJUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DJS and returns the data updated in the database.
   * @param {DJUpdateManyAndReturnArgs} args - Arguments to update many DJS.
   * @example
   * // Update many DJS
   * const dJ = await prisma.dJ.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more DJS and only return the `id`
   * const dJWithIdOnly = await prisma.dJ.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DJUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DJUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DJPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one DJ.
   * @param {DJUpsertArgs} args - Arguments to update or create a DJ.
   * @example
   * // Update or create a DJ
   * const dJ = await prisma.dJ.upsert({
   *   create: {
   *     // ... data to create a DJ
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the DJ we want to update
   *   }
   * })
   */
  upsert<T extends DJUpsertArgs>(args: Prisma.SelectSubset<T, DJUpsertArgs<ExtArgs>>): Prisma.Prisma__DJClient<runtime.Types.Result.GetResult<Prisma.$DJPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of DJS.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DJCountArgs} args - Arguments to filter DJS to count.
   * @example
   * // Count the number of DJS
   * const count = await prisma.dJ.count({
   *   where: {
   *     // ... the filter for the DJS we want to count
   *   }
   * })
  **/
  count<T extends DJCountArgs>(
    args?: Prisma.Subset<T, DJCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DJCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a DJ.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DJAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DJAggregateArgs>(args: Prisma.Subset<T, DJAggregateArgs>): Prisma.PrismaPromise<GetDJAggregateType<T>>

  /**
   * Group by DJ.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DJGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DJGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DJGroupByArgs['orderBy'] }
      : { orderBy?: DJGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DJGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDJGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the DJ model
 */
readonly fields: DJFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for DJ.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DJClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  sets<T extends Prisma.DJ$setsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DJ$setsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DJSetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the DJ model
 */
export interface DJFieldRefs {
  readonly id: Prisma.FieldRef<"DJ", 'String'>
  readonly name: Prisma.FieldRef<"DJ", 'String'>
  readonly createdAt: Prisma.FieldRef<"DJ", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"DJ", 'DateTime'>
}
    

// Custom InputTypes
/**
 * DJ findUnique
 */
export type DJFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DJ
   */
  select?: Prisma.DJSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DJ
   */
  omit?: Prisma.DJOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DJInclude<ExtArgs> | null
  /**
   * Filter, which DJ to fetch.
   */
  where: Prisma.DJWhereUniqueInput
}

/**
 * DJ findUniqueOrThrow
 */
export type DJFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DJ
   */
  select?: Prisma.DJSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DJ
   */
  omit?: Prisma.DJOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DJInclude<ExtArgs> | null
  /**
   * Filter, which DJ to fetch.
   */
  where: Prisma.DJWhereUniqueInput
}

/**
 * DJ findFirst
 */
export type DJFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DJ
   */
  select?: Prisma.DJSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DJ
   */
  omit?: Prisma.DJOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DJInclude<ExtArgs> | null
  /**
   * Filter, which DJ to fetch.
   */
  where?: Prisma.DJWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DJS to fetch.
   */
  orderBy?: Prisma.DJOrderByWithRelationInput | Prisma.DJOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DJS.
   */
  cursor?: Prisma.DJWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DJS from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DJS.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DJS.
   */
  distinct?: Prisma.DJScalarFieldEnum | Prisma.DJScalarFieldEnum[]
}

/**
 * DJ findFirstOrThrow
 */
export type DJFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DJ
   */
  select?: Prisma.DJSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DJ
   */
  omit?: Prisma.DJOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DJInclude<ExtArgs> | null
  /**
   * Filter, which DJ to fetch.
   */
  where?: Prisma.DJWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DJS to fetch.
   */
  orderBy?: Prisma.DJOrderByWithRelationInput | Prisma.DJOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DJS.
   */
  cursor?: Prisma.DJWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DJS from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DJS.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DJS.
   */
  distinct?: Prisma.DJScalarFieldEnum | Prisma.DJScalarFieldEnum[]
}

/**
 * DJ findMany
 */
export type DJFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DJ
   */
  select?: Prisma.DJSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DJ
   */
  omit?: Prisma.DJOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DJInclude<ExtArgs> | null
  /**
   * Filter, which DJS to fetch.
   */
  where?: Prisma.DJWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DJS to fetch.
   */
  orderBy?: Prisma.DJOrderByWithRelationInput | Prisma.DJOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing DJS.
   */
  cursor?: Prisma.DJWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DJS from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DJS.
   */
  skip?: number
  distinct?: Prisma.DJScalarFieldEnum | Prisma.DJScalarFieldEnum[]
}

/**
 * DJ create
 */
export type DJCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DJ
   */
  select?: Prisma.DJSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DJ
   */
  omit?: Prisma.DJOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DJInclude<ExtArgs> | null
  /**
   * The data needed to create a DJ.
   */
  data: Prisma.XOR<Prisma.DJCreateInput, Prisma.DJUncheckedCreateInput>
}

/**
 * DJ createMany
 */
export type DJCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many DJS.
   */
  data: Prisma.DJCreateManyInput | Prisma.DJCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * DJ createManyAndReturn
 */
export type DJCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DJ
   */
  select?: Prisma.DJSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DJ
   */
  omit?: Prisma.DJOmit<ExtArgs> | null
  /**
   * The data used to create many DJS.
   */
  data: Prisma.DJCreateManyInput | Prisma.DJCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * DJ update
 */
export type DJUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DJ
   */
  select?: Prisma.DJSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DJ
   */
  omit?: Prisma.DJOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DJInclude<ExtArgs> | null
  /**
   * The data needed to update a DJ.
   */
  data: Prisma.XOR<Prisma.DJUpdateInput, Prisma.DJUncheckedUpdateInput>
  /**
   * Choose, which DJ to update.
   */
  where: Prisma.DJWhereUniqueInput
}

/**
 * DJ updateMany
 */
export type DJUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update DJS.
   */
  data: Prisma.XOR<Prisma.DJUpdateManyMutationInput, Prisma.DJUncheckedUpdateManyInput>
  /**
   * Filter which DJS to update
   */
  where?: Prisma.DJWhereInput
  /**
   * Limit how many DJS to update.
   */
  limit?: number
}

/**
 * DJ updateManyAndReturn
 */
export type DJUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DJ
   */
  select?: Prisma.DJSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DJ
   */
  omit?: Prisma.DJOmit<ExtArgs> | null
  /**
   * The data used to update DJS.
   */
  data: Prisma.XOR<Prisma.DJUpdateManyMutationInput, Prisma.DJUncheckedUpdateManyInput>
  /**
   * Filter which DJS to update
   */
  where?: Prisma.DJWhereInput
  /**
   * Limit how many DJS to update.
   */
  limit?: number
}

/**
 * DJ upsert
 */
export type DJUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DJ
   */
  select?: Prisma.DJSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DJ
   */
  omit?: Prisma.DJOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DJInclude<ExtArgs> | null
  /**
   * The filter to search for the DJ to update in case it exists.
   */
  where: Prisma.DJWhereUniqueInput
  /**
   * In case the DJ found by the `where` argument doesn't exist, create a new DJ with this data.
   */
  create: Prisma.XOR<Prisma.DJCreateInput, Prisma.DJUncheckedCreateInput>
  /**
   * In case the DJ was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DJUpdateInput, Prisma.DJUncheckedUpdateInput>
}

/**
 * DJ delete
 */
export type DJDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DJ
   */
  select?: Prisma.DJSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DJ
   */
  omit?: Prisma.DJOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DJInclude<ExtArgs> | null
  /**
   * Filter which DJ to delete.
   */
  where: Prisma.DJWhereUniqueInput
}

/**
 * DJ deleteMany
 */
export type DJDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DJS to delete
   */
  where?: Prisma.DJWhereInput
  /**
   * Limit how many DJS to delete.
   */
  limit?: number
}

/**
 * DJ.sets
 */
export type DJ$setsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DJSet
   */
  select?: Prisma.DJSetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DJSet
   */
  omit?: Prisma.DJSetOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DJSetInclude<ExtArgs> | null
  where?: Prisma.DJSetWhereInput
  orderBy?: Prisma.DJSetOrderByWithRelationInput | Prisma.DJSetOrderByWithRelationInput[]
  cursor?: Prisma.DJSetWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.DJSetScalarFieldEnum | Prisma.DJSetScalarFieldEnum[]
}

/**
 * DJ without action
 */
export type DJDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DJ
   */
  select?: Prisma.DJSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DJ
   */
  omit?: Prisma.DJOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DJInclude<ExtArgs> | null
}
